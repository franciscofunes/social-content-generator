'use client';

import { useState, useEffect, useRef, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { 
  X, 
  ZoomIn, 
  ZoomOut, 
  RotateCcw, 
  Download, 
  Share2, 
  ChevronLeft, 
  ChevronRight,
  Copy,
  Heart,
  Maximize2,
  Minimize2
} from 'lucide-react';
import { toast } from 'react-hot-toast';
import { UniversalImage, isSVGUrl } from './UniversalImage';

interface ImageData {
  id: string;
  imageUrl: string;
  prompt: string;
  modelType?: string;
  createdAt?: string;
}

interface EnhancedImageModalProps {
  isOpen: boolean;
  onClose: () => void;
  images: ImageData[];
  currentIndex: number;
  onIndexChange?: (index: number) => void;
}

const ZOOM_LEVELS = [0.25, 0.5, 0.75, 1, 1.25, 1.5, 2, 3, 4];
const DEFAULT_ZOOM_INDEX = 3; // 100%

export function EnhancedImageModal({ 
  isOpen, 
  onClose, 
  images, 
  currentIndex, 
  onIndexChange 
}: EnhancedImageModalProps) {
  const [zoomIndex, setZoomIndex] = useState(DEFAULT_ZOOM_INDEX);
  const [isDownloading, setIsDownloading] = useState(false);
  const [imageLoaded, setImageLoaded] = useState(false);
  const [isDragging, setIsDragging] = useState(false);
  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });
  const [imagePosition, setImagePosition] = useState({ x: 0, y: 0 });
  const [isFullscreen, setIsFullscreen] = useState(false);
  
  const modalRef = useRef<HTMLDivElement>(null);
  const imageContainerRef = useRef<HTMLDivElement>(null);

  const currentImage = images[currentIndex];
  const currentZoom = ZOOM_LEVELS[zoomIndex];
  const canZoomIn = zoomIndex < ZOOM_LEVELS.length - 1;
  const canZoomOut = zoomIndex > 0;
  const canGoPrevious = currentIndex > 0;
  const canGoNext = currentIndex < images.length - 1;

  // Reset zoom and position when modal opens or image changes
  useEffect(() => {
    if (isOpen) {
      setZoomIndex(DEFAULT_ZOOM_INDEX);
      setImageLoaded(false);
      setImagePosition({ x: 0, y: 0 });
      setIsDragging(false);
      // Prevent body scroll
      document.body.style.overflow = 'hidden';
    } else {
      // Restore body scroll
      document.body.style.overflow = 'unset';
    }

    return () => {
      document.body.style.overflow = 'unset';
    };
  }, [isOpen, currentIndex]);

  // Keyboard navigation
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (!isOpen) return;

      switch (e.key) {
        case 'Escape':
          onClose();
          break;
        case 'ArrowLeft':
          if (canGoPrevious) goToPrevious();
          break;
        case 'ArrowRight':
          if (canGoNext) goToNext();
          break;
        case '+':
        case '=':
          if (canZoomIn) handleZoomIn();
          break;
        case '-':
          if (canZoomOut) handleZoomOut();
          break;
        case '0':
          resetZoom();
          break;
        case 'f':
        case 'F':
          toggleFullscreen();
          break;
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [isOpen, canGoPrevious, canGoNext, canZoomIn, canZoomOut]);

  const goToPrevious = useCallback(() => {
    if (canGoPrevious) {
      const newIndex = currentIndex - 1;
      onIndexChange?.(newIndex);
    }
  }, [canGoPrevious, currentIndex, onIndexChange]);

  const goToNext = useCallback(() => {
    if (canGoNext) {
      const newIndex = currentIndex + 1;
      onIndexChange?.(newIndex);
    }
  }, [canGoNext, currentIndex, onIndexChange]);

  const handleZoomIn = () => {
    if (canZoomIn) {
      setZoomIndex(prev => prev + 1);
    }
  };

  const handleZoomOut = () => {
    if (canZoomOut) {
      setZoomIndex(prev => prev - 1);
    }
  };

  const resetZoom = () => {
    setZoomIndex(DEFAULT_ZOOM_INDEX);
    setImagePosition({ x: 0, y: 0 });
  };

  const toggleFullscreen = async () => {
    if (!document.fullscreenElement) {
      try {
        await modalRef.current?.requestFullscreen();
        setIsFullscreen(true);
      } catch (error) {
        console.error('Error entering fullscreen:', error);
      }
    } else {
      try {
        await document.exitFullscreen();
        setIsFullscreen(false);
      } catch (error) {
        console.error('Error exiting fullscreen:', error);
      }
    }
  };

  const handleDownload = async () => {
    if (!currentImage) return;

    setIsDownloading(true);
    try {
      // For SVG images, we need special handling
      if (isSVGUrl(currentImage.imageUrl)) {
        // Download SVG directly
        const response = await fetch(currentImage.imageUrl);
        const svgContent = await response.text();
        const blob = new Blob([svgContent], { type: 'image/svg+xml' });
        const url = window.URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = `generated-vector-${currentImage.id}.svg`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
      } else {
        // Handle regular images
        const response = await fetch(currentImage.imageUrl);
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = `generated-image-${currentImage.id}.jpg`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
      }
      
      toast.success('Image downloaded successfully!');
    } catch (error) {
      console.error('Download error:', error);
      toast.error('Failed to download image');
    } finally {
      setIsDownloading(false);
    }
  };

  const handleCopyPrompt = () => {
    if (currentImage?.prompt) {
      navigator.clipboard.writeText(currentImage.prompt);
      toast.success('Prompt copied to clipboard!');
    }
  };

  // Mouse drag handling for panning
  const handleMouseDown = (e: React.MouseEvent) => {
    if (currentZoom > 1) {
      setIsDragging(true);
      setDragStart({ x: e.clientX - imagePosition.x, y: e.clientY - imagePosition.y });
    }
  };

  const handleMouseMove = (e: React.MouseEvent) => {
    if (isDragging && currentZoom > 1) {
      setImagePosition({
        x: e.clientX - dragStart.x,
        y: e.clientY - dragStart.y,
      });
    }
  };

  const handleMouseUp = () => {
    setIsDragging(false);
  };

  if (!isOpen || !currentImage) return null;

  return (
    <div 
      ref={modalRef}
      className="fixed inset-0 z-50 flex items-center justify-center bg-black/90 backdrop-blur-sm"
      onClick={(e) => e.target === e.currentTarget && onClose()}
    >
      {/* Navigation Arrow - Previous */}
      {canGoPrevious && (
        <Button
          variant="ghost"
          size="lg"
          className="absolute left-4 top-1/2 -translate-y-1/2 z-10 bg-black/50 hover:bg-black/70 text-white border-none h-12 w-12"
          onClick={goToPrevious}
        >
          <ChevronLeft className="h-6 w-6" />
        </Button>
      )}

      {/* Navigation Arrow - Next */}
      {canGoNext && (
        <Button
          variant="ghost"
          size="lg"
          className="absolute right-4 top-1/2 -translate-y-1/2 z-10 bg-black/50 hover:bg-black/70 text-white border-none h-12 w-12"
          onClick={goToNext}
        >
          <ChevronRight className="h-6 w-6" />
        </Button>
      )}

      {/* Top Controls */}
      <div className="absolute top-4 left-4 right-4 flex justify-between items-start z-10">
        <div className="flex items-center gap-2 bg-black/50 rounded-lg p-2">
          <span className="text-white text-sm">
            {currentIndex + 1} of {images.length}
          </span>
          {currentImage.modelType && (
            <span className="text-white/70 text-xs px-2 py-1 bg-white/10 rounded">
              {currentImage.modelType}
            </span>
          )}
        </div>

        <div className="flex items-center gap-2">
          {/* Zoom Controls */}
          <div className="flex items-center gap-1 bg-black/50 rounded-lg p-2">
            <Button
              variant="ghost"
              size="sm"
              className="text-white hover:bg-white/20 h-8 w-8 p-0"
              onClick={handleZoomOut}
              disabled={!canZoomOut}
            >
              <ZoomOut className="h-4 w-4" />
            </Button>
            
            <span className="text-white text-xs min-w-[3rem] text-center">
              {Math.round(currentZoom * 100)}%
            </span>
            
            <Button
              variant="ghost"
              size="sm"
              className="text-white hover:bg-white/20 h-8 w-8 p-0"
              onClick={handleZoomIn}
              disabled={!canZoomIn}
            >
              <ZoomIn className="h-4 w-4" />
            </Button>
            
            <Button
              variant="ghost"
              size="sm"
              className="text-white hover:bg-white/20 h-8 w-8 p-0"
              onClick={resetZoom}
              disabled={currentZoom === 1}
            >
              <RotateCcw className="h-4 w-4" />
            </Button>
          </div>

          {/* Action Controls */}
          <div className="flex items-center gap-1 bg-black/50 rounded-lg p-2">
            <Button
              variant="ghost"
              size="sm"
              className="text-white hover:bg-white/20 h-8 w-8 p-0"
              onClick={toggleFullscreen}
            >
              {isFullscreen ? <Minimize2 className="h-4 w-4" /> : <Maximize2 className="h-4 w-4" />}
            </Button>
            
            <Button
              variant="ghost"
              size="sm"
              className="text-white hover:bg-white/20 h-8 w-8 p-0"
              onClick={handleDownload}
              disabled={isDownloading}
            >
              <Download className="h-4 w-4" />
            </Button>
            
            <Button
              variant="ghost"
              size="sm"
              className="text-white hover:bg-white/20 h-8 w-8 p-0"
              onClick={handleCopyPrompt}
            >
              <Copy className="h-4 w-4" />
            </Button>
          </div>

          {/* Close Button */}
          <Button
            variant="ghost"
            size="sm"
            className="text-white hover:bg-white/20 bg-black/50 rounded-lg h-10 w-10 p-0"
            onClick={onClose}
          >
            <X className="h-5 w-5" />
          </Button>
        </div>
      </div>

      {/* Image Container */}
      <div 
        ref={imageContainerRef}
        className="relative max-w-[90vw] max-h-[90vh] overflow-hidden rounded-lg bg-white/5"
        onMouseDown={handleMouseDown}
        onMouseMove={handleMouseMove}
        onMouseUp={handleMouseUp}
        onMouseLeave={handleMouseUp}
        style={{ cursor: currentZoom > 1 ? (isDragging ? 'grabbing' : 'grab') : 'default' }}
      >
        <div
          className="transition-transform duration-200 ease-out"
          style={{
            transform: `scale(${currentZoom}) translate(${imagePosition.x / currentZoom}px, ${imagePosition.y / currentZoom}px)`,
            transformOrigin: 'center center'
          }}
        >
          <UniversalImage
            src={currentImage.imageUrl}
            alt={currentImage.prompt}
            width={800}
            height={600}
            className="max-w-full max-h-[80vh] object-contain"
            onLoad={() => setImageLoaded(true)}
            onError={() => {
              console.error('Failed to load image:', currentImage.imageUrl);
              toast.error('Failed to load image');
            }}
          />
        </div>
      </div>

      {/* Bottom Info */}
      {imageLoaded && currentImage.prompt && (
        <div className="absolute bottom-4 left-4 right-4 bg-black/50 rounded-lg p-4 max-h-32 overflow-y-auto">
          <p className="text-white text-sm leading-relaxed">
            {currentImage.prompt}
          </p>
          {currentImage.createdAt && (
            <p className="text-white/70 text-xs mt-2">
              Created: {new Date(currentImage.createdAt).toLocaleString()}
            </p>
          )}
        </div>
      )}

      {/* Loading State */}
      {!imageLoaded && (
        <div className="absolute inset-0 flex items-center justify-center">
          <div className="text-white text-lg">Loading image...</div>
        </div>
      )}

      {/* Keyboard Shortcuts Help */}
      <div className="absolute bottom-4 right-4 text-white/50 text-xs">
        <div>ESC: Close | ←/→: Navigate | +/-: Zoom | 0: Reset | F: Fullscreen</div>
      </div>
    </div>
  );
}